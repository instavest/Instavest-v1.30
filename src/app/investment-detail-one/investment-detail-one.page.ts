import { Component, ViewChild, OnInit, ElementRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Router } from '@angular/router';
import { ActionSheetController, Platform, ModalController, IonRouterOutlet } from '@ionic/angular';
import { UserService } from '../providers/user.service';
import { Browser, OpenOptions } from '@capacitor/browser';
import { VideoModalPage } from '../video-modal/video-modal.page';
import { Preferences } from '@capacitor/preferences';
import { environment } from 'src/environments/environment';
import { VaultService } from '../providers/vault.service';
import { IonicPaymentsService } from '../providers/ionic-payments.service';
import Chart from 'chart.js/auto';

type TermsObj = { 'terms1': boolean, 'terms2': boolean, 'terms3': boolean, 'terms4': boolean };
type FiatObject = { 'FundId': string, 'SPVNAME': string, 'Type': string, 'MemberId': string, 'Currency': string, 'Withdraw': string, 'Deposit': string, 'Spend': string, 'Income': string, 'Available': string, 'escrow_in': string, 'escrow_out': string, 'CurrencySymbol': string, 'CurrencySymbolPos': string, 'CurrencyName': string, 'LocalCurrency': string, 'LocalCurrencySymbol': string, 'LocalCurrencySymbolPos': string, 'Extra': string, 'RecStatus': string, 'locale_id': string, 'currency_code': string };
type AssetObject = { 'FundId': string, 'SPVNAME': string, 'Type': string, 'MemberId': string, 'Currency': string, 'Withdraw': string, 'Deposit': string, 'Spend': string, 'Income': string, 'Available': string, 'escrow_in': string, 'escrow_out': string, 'CurrencySymbol': string, 'CurrencySymbolPos': string, 'CurrencyName': string, 'LocalCurrency': string, 'LocalCurrencySymbol': string, 'LocalCurrencySymbolPos': string, 'Extra': string, 'RecStatus': string, 'locale_id': string, 'currency_code': string, 'Lock': boolean, 'LockEnd': string, 'LegalId': string, 'market': string, 'share_value': string, 'LegalMemberId': string, 'Stats': { 'totalOnOffer': string, 'totalBids': string, 'offerMin': string, 'offerMax': string, 'timestamp': string } };
type ProductImages = Array<{ 'src': string, 'name': string, 'description': string }>;
type OfferVitals = { 'LegalId': string, 'StartDate': string, 'EndDate': string, 'TokensIssued': string, 'TokensAvailable': string, 'TokenBasePrice': string, 'SalesCommission': string, 'TokenSalesPrice': string, 'TokensSold': string, 'TotalDays': string, 'DaysLeft': string, 'HoursLeft': string, 'MinsLeft': string, 'SecondsLeft': string, 'TotalBuyers': string, 'InEscrow': string, 'requestTimeStamp': string };

type faqElement = Array<{ title: string, description: string, active: boolean }>;
type newCheckoutObj = {
  'totalShares': number,
  'totalValue': number,
  'fees': number,
  'vehicle': string,
  'terms': TermsObj,
  'confirm': boolean,
  'price'?: number
};

@Component({
  selector: 'app-investment-detail-one',
  templateUrl: './investment-detail-one.page.html',
  styleUrls: ['./investment-detail-one.page.scss']
})

export class InvestmentDetailOnePage implements OnInit {

  @ViewChild('lineCanvas', { static: true }) private lineCanvas: ElementRef;


  /*** REMOVE LATER WHEN API IS AVAILABLE ***/
  testData = {
    "1601596800": 12675.242, "1601683200": 12713.641, "1601769600": 12717.15, "1601856000": 12717.15, "1601942400": 12697.035, "1602028800": 12703.108, "1602115200": 12703.108, "1602201600": 12733.203, "1602288000": 12729.6, "1602374400": 12778.353000000001, "1602460800": 12735.338, "1602547200": 12643.536, "1602633600": 12643.536, "1602720000": 12684.928, "1602806400": 12690.815, "1602892800": 12655.371000000001, "1602979200": 12636.324,
    "1603065600": 12624.533000000001, "1603152000": 12606.23, "1603238400": 12569.652, "1603324800": 12125.52, "1603411200": 12520.784, "1603497600": 12464.27, "1603584000": 12464.27, "1603670400": 11936.32, "1603756800": 11936.32, "1603843200": 11327.039999999999, "1603929600": 11405.22, "1604016000": 11468.884, "1604102400": 11460.96, "1604188800": 11460.96, "1604275200": 11472.69, "1604361600": 11540.432, "1604448000": 11536.875, "1604534400": 11924.864,
    "1604620800": 11587.609, "1604707200": 12287.648000000001, "1604793600": 12234.312, "1604880000": 12215.550000000001, "1604966400": 12208.812, "1605052800": 12141.550000000001, "1605139200": 11602.04, "1605225600": 11623.986, "1605312000": 12129.525000000001, "1605398400": 11607.596, "1605484800": 11607.596, "1605571200": 11607.596, "1605657600": 11636.415, "1605744000": 11689.885, "1605830400": 11667.648000000001, "1605916800": 11578.84,
    "1606003200": 11578.84, "1606089600": 11477.12, "1606176000": 11561.571, "1606262400": 11710.144, "1606348800": 11986.976, "1606435200": 11935.308, "1606521600": 11935.308, "1606608000": 11940.77, "1606694400": 11716.556, "1606780800": 11932.436, "1606867200": 11961.142, "1606953600": 11768.73, "1607040000": 11768.73, "1607126400": 12085.226, "1607212800": 12117.636, "1607299200": 12115.784000000001, "1607385600": 12137.385, "1607472000": 12177.999,
    "1607558400": 12187.269, "1607644800": 12187.269, "1607731200": 12152.970000000001, "1607817600": 12164.094000000001, "1607904000": 12182.784000000001, "1607990400": 12172.27, "1608076800": 12095.300000000001, "1608163200": 12151.116, "1608249600": 12055.594000000001, "1608336000": 12004.538, "1608422400": 12026.85, "1608508800": 12026.85, "1608595200": 12006.5, "1608681600": 12001.875, "1608768000": 11994.475, "1608854400": 11982.44, "1608940800": 11989.85,
    "1609027200": 11940.825, "1609113600": 11940.825, "1609200000": 11940.77, "1609286400": 11910.212000000001, "1609372800": 11925.954, "1609459200": 11911.138, "1609545600": 11885.412, "1609632000": 11869.704, "1609718400": 11882.640000000001, "1609804800": 11893.544, "1609891200": 11801.150000000001, "1609977600": 11749.79, "1610064000": 11738.904, "1610150400": 11690.960000000001, "1610236800": 11717.244, "1610323200": 11686.76, "1610409600": 11653.413,
    "1610496000": 11630.640000000001, "1610582400": 11598.012, "1610668800": 11632.480000000001, "1610755200": 11661, "1610841600": 11651.314, "1610928000": 11728.014000000001, "1611014400": 11739.066, "1611100800": 11768.25, "1611187200": 11806.5, "1611273600": 11814.615, "1611360000": 11785.787, "1611446400": 11879.560000000001, "1611532800": 11876.767, "1611619200": 11879.889000000001, "1611705600": 11865.292, "1611792000": 11831.148000000001,
    "1611878400": 11835.179999999998, "1611964800": 11829.599999999999, "1612051200": 11846.044, "1612137600": 11829.286, "1612224000": 11831.148000000001, "1612310400": 11813.789999999999, "1612396800": 11822.769, "1612483200": 11878.629, "1612569600": 11914.104, "1612656000": 11913.17, "1612742400": 11929.982, "1612828800": 11913.477, "1612915200": 11889.219000000001, "1613001600": 11860.632, "1613088000": 11858.43, "1613174400": 11935.872,
    "1613260800": 11862.345000000001, "1613347200": 11886.264, "1613433600": 11872.727, "1613520000": 11853.987000000001, "1613606400": 11831.49, "1613692800": 11816.034, "1613779200": 11776.326000000001, "1613865600": 11781.411999999998, "1613952000": 11866.827000000001, "1614038400": 11892.018, "1614124800": 11860.632, "1614211200": 11863.733, "1614297600": 11877.698, "1614384000": 11924.939999999999, "1614470400": 11897.249, "1614556800": 11901.348,
    "1614643200": 11911.611, "1614729600": 11920.941, "1614816000": 11980.8, "1614902400": 11974.248, "1614988800": 11933.405, "1615075200": 11968.88, "1615161600": 11899.745, "1615248000": 11885.720000000001, "1615334400": 11910.367999999999, "1615420800": 11908.16, "1615507200": 11873.358, "1615593600": 11973.923, "1615680000": 11951.435000000001, "1615766400": 11935.506000000001, "1615852800": 11998.895999999999, "1615939200": 11997.957999999999,
    "1616025600": 12000.771999999999, "1616112000": 12081.82, "1616198400": 12067.962, "1616284800": 12084.545, "1616371200": 12084.545, "1616457600": 11961.143999999998, "1616544000": 11957.715, "1616630400": 12033.108, "1616716800": 11915.343, "1616803200": 11915.343, "1616889600": 11915.343, "1616976000": 11874.291000000001, "1617062400": 11870.206, "1617148800": 11887.59, "1617235200": 11919.577000000001, "1617321600": 11868.890000000001, "1617408000": 11854.439999999999,
    "1617494400": 11917.289999999999, "1617580800": 11913.537999999999, "1617667200": 11896.191, "1617753600": 11888.679, "1617840000": 11906.039999999999, "1617926400": 11906.039999999999, "1618012800": 11874.08, "1618099200": 11868.439999999999, "1618185600": 11856.22, "1618272000": 11886.3, "1618358400": 11920.104, "1618444800": 11960.56, "1618531200": 11987.274000000001, "1618617600": 11952.934, "1618704000": 11958.562, "1618790400": 11984.826, "1618876800": 11979.762, "1618963200": 12008.871000000001, "1619049600": 12001.359, "1619136000": 12050.8, "1619222400": 12160.83, "1619308800": 12025.035, "1619395200": 12115.918, "1619481600": 12097.925, "1619568000": 12111.182999999999, "1619654400": 12130.608, "1619740800": 12101.232, "1619827200": 12042.608, "1619913600": 12042.608, "1620000000": 12050.16, "1620086400": 12019.478, "1620172800": 12102.08, "1620259200": 12041.977, "1620345600": 12042.34, "1620432000": 12055.821, "1620518400": 12055.821, "1620604800": 12061.455, "1620691200": 12053.943000000001, "1620777600": 12086.13, "1620864000": 12115.917000000001, "1620950400": 12139.392, "1621036800": 12132.58, "1621123200": 12129.809, "1621209600": 12110.67, "1621296000": 12109.41, "1621382400": 12142.671999999999, "1621468800": 12147.725999999999, "1621555200": 12149.916, "1621641600": 12177.902, "1621728000": 12177.902, "1621814400": 12131.076, "1621900800": 12089.34, "1621987200": 12109.08, "1622073600": 12105.828, "1622160000": 12105.103000000001, "1622246400": 12134.905999999999, "1622332800": 12162.867, "1622419200": 12164.745, "1622505600": 12173.196, "1622592000": 12167.562, "1622678400": 12390.279999999999, "1622764800": 12358.244999999999, "1622851200": 12356.342999999999, "1622937600": 12349.05, "1623024000": 12372.8, "1623110400": 12377.265, "1623196800": 12372.192, "1623283200": 12360.768, "1623369600": 12360.41, "1623456000": 12344.208999999999, "1623542400": 12341.35, "1623628800": 12369.939999999999, "1623715200": 12367.081, "1623801600": 12417.264, "1623888000": 12434.436, "1623974400": 12415.684, "1624060800": 12490.14, "1624147200": 12506.076, "1624233600": 12492.32, "1624320000": 12502.858, "1624406400": 12542.761, "1624492800": 12547.555999999999, "1624579200": 12546.597, "1624665600": 12549.474, "1624752000": 12529.681999999999, "1624838400": 12525.85, "1624924800": 12532.555999999999, "1625011200": 12519.144, "1625097600": 12501.9, "1625184000": 12506.319, "1625270400": 12563.72, "1625356800": 12425.766, "1625443200": 12421.962, "1625529600": 12413.403, "1625616000": 12391.8, "1625702400": 12491.362, "1625788800": 12382.3, "1625875200": 12376.599999999999, "1625961600": 12391.8, "1626048000": 12390.579, "1626134400": 12393.431999999999, "1626220800": 12371.24, "1626307200": 12390.279999999999, "1626393600": 12446.18, "1626480000": 12459.547999999999, "1626566400": 12453.812, "1626652800": 12430.619999999999, "1626739200": 12420.126, "1626825600": 12436.344, "1626912000": 12436.344, "1626998400": 12423.942, "1627084800": 12416.636999999999, "1627171200": 12414.731, "1627257600": 12434.436, "1627344000": 12425.85, "1627430400": 12395.992, "1627516800": 12392.184, "1627603200": 12399.8, "1627689600": 12391.8, "1627776000": 12424.814999999999, "1627862400": 12412.92, "1627948800": 12409.849999999999, "1628035200": 12438.128999999999, "1628121600": 12420.3, "1628208000": 12425.766, "1628294400": 12444.786, "1628380800": 12444.786, "1628467200": 12444.786, "1628553600": 12455.247, "1628640000": 12442.884, "1628726400": 12397.235999999999, "1628812800": 12409.32, "1628899200": 12398.187, "1628985600": 12420.3, "1629072000": 12572.377999999999, "1629158400": 12393.699999999999, "1629244800": 12411.501, "1629331200": 12397.5, "1629417600": 12397.235999999999, "1629504000": 12395.039999999999, "1629590400": 12403.893, "1629676800": 12404.844, "1629763200": 12411.224, "1629849600": 12385.519999999999, "1629936000": 12430.619999999999, "1630022400": 12428.369999999999, "1630108800": 12480.823999999999, "1630195200": 12474.494999999999, "1630281600": 12468.752999999999, "1630368000": 12435.055, "1630454400": 12479.866, "1630540800": 12489.446, "1630627200": 12465.882, "1630713600": 12432.779999999999, "1630800000": 12432.779999999999, "1630886400": 12425.132, "1630972800": 12410.225, "1631059200": 12418.82, "1631145600": 12436.01, "1631232000": 12457.975, "1631318400": 12451.289999999999, "1631404800": 12460.84, "1631491200": 12502.568, "1631577600": 12524.259, "1631664000": 12540.22, "1631750400": 12522.345, "1631836800": 12527.766, "1631923200": 12588.139, "1632009600": 12562.56, "1632096000": 12536.387999999999, "1632182400": 12532.555999999999, "1632268800": 12524.892, "1632355200": 12522.018, "1632441600": 12523.934, "1632528000": 12523.581, "1632614400": 12557.145999999999, "1632700800": 12581.412, "1632787200": 12572.16, "1632873600": 12580.451, "1632960000": 12607.01, "1633046400": 12609.895999999999, "1633132800": 12606.633, "1633219200": 12594.503999999999, "1633305600": 12621.439999999999, "1633392000": 12649.005, "1633478400": 12637.448999999999, "1633564800": 12644.189999999999, "1633651200": 12643.226999999999, "1633737600": 12643.226999999999, "1633824000": 12622.041, "1633910400": 12638.412, "1633996800": 12641.895999999999, "1634083200": 12632.814999999999, "1634169600": 12619.305, "1634256000": 12645.359999999999, "1634342400": 12642.465, "1634428800": 12646.324999999999, "1634515200": 12621.652, "1634601600": 12655.975, "1634688000": 12675.275, "1634774400": 12675.851999999999, "1634860800": 12694.206, "1634947200": 12707.73, "1635033600": 12681.42, "1635120000": 12696.844, "1635206400": 12731.88, "1635292800": 12732.846, "1635379200": 12738.296, "1635465600": 12735.675, "1635552000": 12729.184, "1635638400": 12723.64, "1635724800": 12683.52, "1635811200": 12671.267, "1635897600": 12644.16, "1635984000": 12661.175, "1636070400": 12687.122, "1636156800": 12682.56, "1636243200": 12682.56, "1636329600": 12694.08, "1636416000": 12706.341999999999, "1636502400": 12712.108, "1636588800": 12702.498, "1636675200": 12672.423999999999, "1636761600": 12698.289999999999, "1636848000": 12695.416, "1636934400": 12684.078, "1637020800": 12670.68, "1637107200": 12669.723, "1637193600": 12675.465, "1637280000": 12680.25, "1637366400": 12642.927, "1637452800": 12657.282, "1637539200": 12696.96, "1637625600": 12731.108, "1637712000": 12768.18, "1637798400": 12809.16, "1637884800": 12808.194, "1637971200": 12765.288, "1638057600": 12761.826, "1638144000": 12781.806, "1638230400": 12798.895999999999, "1638316800": 12795.024, "1638403200": 12870.93, "1638489600": 12891.967, "1638576000": 12959.676, "1638662400": 12949.256, "1638748800": 12954.110999999999, "1638835200": 12944.401, "1638921600": 12931.778, "1639008000": 12909.987, "1639094400": 12926.672, "1639180800": 12939.056999999999, "1639267200": 12886.984, "1639353600": 12878.271999999999, "1639440000": 12938.088, "1639526400": 12958.616, "1639612800": 12968.127, "1639699200": 12964.251, "1639785600": 12961.344, "1639872000": 12992.351999999999, "1639958400": 13017.663999999999, "1640044800": 12997.529999999999, "1640131200": 13017.753999999999, "1640217600": 12976.404, "1640304000": 13008.216, "1640390400": 13022.594, "1640476800": 13002.33, "1640563200": 13027.315999999999, "1640649600": 13106.287999999999, "1640736000": 13104.503999999999, "1640822400": 13127.26, "1640908800": 13138.792, "1640995200": 13156.8, "1641081600": 13192.32, "1641168000": 13193.279999999999, "1641254400": 13185.6, "1641340800": 13192.618, "1641427200": 13196.624, "1641513600": 13244.35, "1641600000": 13256.804, "1641686400": 13252.972, "1641772800": 13288.418, "1641859200": 13303.746, "1641945600": 13302.3, "1642032000": 13248.198, "1642118400": 13238.871, "1642204800": 13229.06, "1642291200": 13297.15, "1642377600": 13293.591999999999, "1642464000": 13320.163999999999, "1642550400": 13341.204, "1642636800": 13350.684, "1642723200": 13419, "1642809600": 13456.849999999999, "1642896000": 13601.537999999999, "1642982400": 13575.48, "1643068800": 13630.032, "1643155200": 13622.015000000001, "1643241600": 13673.759999999998, "1643328000": 13741.224, "1643414400": 13778.687999999998, "1643500800": 13854.211000000001, "1643587200": 13918.45, "1643673600": 13941.503, "1643760000": 13929.622000000001, "1643846400": 14005.163999999999, "1643932800": 14116.071999999998, "1644019200": 14181.6, "1644105600": 14225.451000000001, "1644192000": 14342.328, "1644278400": 14410.715999999999, "1644364800": 14439.339999999998, "1644451200": 14411.997000000001, "1644537600": 14500.075, "1644624000": 14692.416, "1644710400": 14801.535, "1644796800": 14783.039999999999, "1644883200": 14778.855, "1644969600": 14766.991999999998, "1645056000": 14806.259999999998, "1645142400": 14823.632, "1645228800": 14909.905999999999, "1645315200": 14909.905999999999, "1645401600": 14966.666, "1645488000": 15029.837, "1645574400": 14942.003999999999, "1645660800": 14954.25, "1645747200": 14903.558, "1645833600": 14919.555, "1645920000": 14964.723000000002, "1646006400": 14887.056, "1646092800": 14858.946000000002, "1646179200": 14824.367999999999, "1646265600": 14785.155, "1646352000": 14763.650000000001, "1646438400": 14637.269999999999, "1646524800": 14637.269999999999, "1646611200": 14667.96, "1646697600": 14665.169999999998, "1646784000": 14644.71, "1646870400": 14630.759999999998, "1646956800": 14654.975, "1647043200": 14726.55, "1647129600": 14684.699999999999, "1647216000": 14668.896, "1647302400": 14627.105000000001, "1647388800": 14604.864000000001, "1647475200": 14576.148000000001, "1647561600": 14499.408000000001, "1647648000": 14529.900000000001, "1647734400": 14513.252, "1647820800": 14483.698, "1647907200": 14425.623000000001, "1647993600": 14412.729000000001, "1648080000": 14407.203000000001, "1648166400": 14438.517, "1648252800": 14425.6, "1648339200": 14460.560000000001, "1648425600": 14396.772, "1648512000": 14381.055, "1648598400": 14408.821, "1648684800": 14361.964, "1648771200": 14313.24, "1648857600": 14317.666000000001, "1648944000": 14320.405, "1649030400": 14320.405, "1649116800": 14436.331, "1649203200": 14423.493, "1649289600": 14346.144, "1649376000": 14366.415, "1649462400": 14373.735, "1649548800": 14376.306, "1649635200": 14314.014000000001, "1649721600": 14248.278, "1649808000": 14148.761, "1649894400": 14174.312, "1649980800": 14126.685000000001, "1650067200": 14163.065, "1650153600": 14145.642, "1650240000": 14139.223, "1650326400": 14109.148000000001, "1650412800": 14110.064, "1650499200": 14070.676000000001, "1650585600": 14006.556, "1650672000": 13977.244, "1650758400": 13922.048, "1650844800": 13912.575, "1650931200": 13988.236, "1651017600": 13975.997000000001, "1651104000": 13913.124, "1651190400": 13955.436, "1651276800": 13906.305, "1651363200": 13919.143, "1651449600": 13931.568000000001, "1651536000": 13893.93, "1651622400": 13821.024000000001, "1651708800": 13796.622000000001, "1651795200": 13759.902, "1651881600": 13846.314, "1651968000": 13741.542000000001, "1652054400": 13713.735, "1652140800": 13678.889000000001, "1652227200": 13700.452000000001, "1652313600": 13730.268, "1652400000": 13704.128, "1652486400": 13632.300000000001, "1652572800": 13608.432, "1652659200": 13566.204, "1652745600": 13564.480000000001, "1652832000": 13501.92, "1652918400": 13491.800000000001, "1653004800": 13491.729000000001, "1653091200": 13467.654, "1653177600": 13471.185000000001, "1653264000": 13472.108, "1653350400": 13494.096000000001, "1653436800": 13479.312, "1653523200": 13400.475, "1653609600": 13358.268, "1653696000": 13376.425000000001, "1653782400": 13330.696, "1653868800": 13319.584, "1653955200": 13371.048, "1654041600": 13374.218, "1654128000": 13397.004, "1654214400": 13364.594000000001, "1654300800": 13346.943000000001, "1654387200": 13333.008, "1654473600": 13253.114000000001, "1654560000": 13272.96, "1654646400": 13306.163999999999, "1654732800": 13274.475999999999, "1654819200": 13226.944, "1654905600": 13180.167000000001, "1654992000": 13121.514000000001, "1655078400": 13126.169, "1655164800": 13051.619999999999, "1655251200": 13034.88, "1655337600": 13050.758, "1655424000": 13094.599999999999, "1655510400": 13089.939999999999, "1655596800": 13046.135999999999, "1655683200": 13030.278, "1655769600": 12989.312, "1655856000": 13009.787999999999, "1655942400": 13006.06, "1656028800": 13027.355000000001, "1656115200": 13006.953000000001, "1656201600": 13048.913999999999, "1656288000": 13035.77, "1656374400": 13047.839999999998, "1656460800": 13015.2, "1656547200": 12992.616, "1656633600": 13007.246, "1656720000": 12973.895999999999, "1656806400": 12986.063999999998, "1656892800": 12971.255000000001, "1656979200": 12971.255000000001, "1657065600": 12919.088, "1657152000": 12913.483999999999, "1657238400": 12900.195000000002, "1657324800": 12865.849999999999, "1657411200": 12844.367999999999, "1657497600": 12826.884, "1657584000": 12838.08, "1657670400": 12815.688, "1657756800": 12813.822, "1657843200": 12815.688, "1657929600": 12831.549, "1658016000": 12772.127999999999, "1658102400": 12710.012, "1658188800": 12704.426000000001, "1658275200": 12676.83, "1658361600": 12682.41, "1658448000": 12651.72, "1658534400": 12637.769999999999, "1658620800": 12603.743, "1658707200": 12592.032000000001, "1658793600": 12582.376, "1658880000": 12577.32, "1658966400": 12592.960000000001, "1659052800": 12575.328000000001, "1659139200": 12599.098, "1659225600": 12596.311000000002, "1659312000": 12563.796, "1659398400": 12535.4, "1659484800": 12557.768, "1659571200": 12559.113000000001, "1659657600": 12575.907000000001, "1659744000": 12586.583999999999, "1659830400": 12543.025000000001, "1659916800": 12545.83, "1660003200": 12546.765000000001, "1660089600": 12498.145, "1660176000": 12496.275000000001, "1660262400": 12478.51, "1660348800": 12463.776, "1660435200": 12471.798, "1660521600": 12456.774000000001, "1660608000": 12404.112, "1660694400": 12391.044, "1660780800": 12404.19, "1660867200": 12414.613000000001, "1660953600": 12370.274, "1661040000": 12395.793000000001, "1661126400": 12368.387999999999, "1661212800": 12381.503999999999, "1661299200": 12385.416, "1661385600": 12315.88, "1661472000": 12315.88, "1661558400": 12285.563999999998, "1661644800": 12285.563999999998, "1661731200": 12266.544, "1661817600": 12220.565999999999, "1661904000": 12191.364, "1661990400": 12132.58, "1662076800": 12184.279999999999, "1662163200": 12166.42, "1662249600": 12145.74, "1662336000": 12135.4, "1662422400": 12125.06, "1662508800": 12136.34, "1662595200": 12126.939999999999, "1662681600": 12098.076000000001, "1662768000": 12136.34, "1662854400": 12160.543000000001, "1662940800": 12154.897, "1663027200": 12152.32, "1663113600": 12170.894, "1663200000": 12166.42, "1663286400": 12202.888, "1663372800": 12099.223999999998, "1663459200": 12078.794, "1663545600": 12112.271999999999, "1663632000": 12113.98, "1663718400": 12130.792, "1663804800": 12205.9, "1663891200": 12200.259999999998, "1663977600": 12140.132, "1664064000": 12132.732, "1664150400": 12174.635, "1664236800": 12272.376, "1664323200": 12289.176, "1664409600": 12304.096, "1664496000": 12153.258, "1664582400": 12239.094000000001, "1664668800": 12306.928, "1664755200": 12336.974999999999, "1664841600": 12285.215999999999, "1664928000": 12272.944, "1665014400": 12230.71, "1665100800": 12220.337, "1665187200": 12180.708, "1665273600": 12253.119999999999, "1665360000": 12220.08, "1665446400": 12184.769999999999, "1665532800": 12144.264, "1665619200": 12137.353, "1665705600": 12085.859999999999, "1665792000": 12056.31, "1665878400": 12061.98, "1665964800": 12056.31, "1666051200": 12034.574999999999, "1666137600": 11980.814999999999, "1666224000": 11969.92, "1666310400": 11939.712, "1666396800": 11911.975999999999, "1666483200": 11851.119, "1666569600": 11834.217, "1666656000": 11844.939999999999, "1666742400": 11849.64, "1666828800": 11821.071, "1666915200": 11842.119999999999, "1667001600": 11837.034000000001, "1667088000": 11868.258, "1667174400": 11804.73, "1667260800": 11805.46, "1667347200": 11813.559000000001, "1667433600": 11791.598, "1667520000": 11836.48, "1667606400": 11810.16, "1667692800": 11798.88, "1667779200": 11750.326, "1667865600": 11725, "1667952000": 11747.179999999998, "1668038400": 11741.539999999999, "1668124800": 11689.611, "1668211200": 11703, "1668297600": 11713.34, "1668384000": 11763.441, "1668470400": 11741.256000000001, "1668556800": 11775.279, "1668643200": 11792.145, "1668729600": 11728.743, "1668816000": 11763.264000000001, "1668902400": 11780.991, "1668988800": 11798.287999999999, "1669075200": 11732.475, "1669161600": 11739.006000000001, "1669248000": 11684.050000000001, "1669334400": 11632.009, "1669420800": 11665.92, "1669507200": 11700.33, "1669593600": 11698.47, "1669680000": 11617.596000000001, "1669766400": 11633.408000000001, "1669852800": 11480.274000000001, "1669939200": 11488.092, "1670025600": 11456.276, "1670112000": 11454.43, "1670198400": 11446.630000000001, "1670284800": 11459.448, "1670371200": 11543.004, "1670457600": 11550.42, "1670544000": 11523.904, "1670630400": 11566.979000000001, "1670716800": 11592.991, "1670803200": 11624.577000000001, "1670889600": 11599.072, "1670976000": 11556.384, "1671062400": 11595.605000000001, "1671148800": 11576.64, "1671235200": 11539.109, "1671321600": 11529.819000000001, "1671408000": 11442.431, "1671494400": 11515.884, "1671580800": 11493.588, "1671667200": 11532, "1671753600": 11521.458, "1671840000": 11565.48, "1671926400": 11560.83, "1672012800": 11550.599999999999, "1672099200": 11555.572, "1672185600": 11587.226, "1672272000": 11632.292, "1672358400": 11624.247000000001, "1672444800": 11630.778, "1672531200": 11616.44, "1672617600": 11627.66, "1672704000": 11614.570000000002, "1672790400": 11550.917000000001, "1672876800": 11542.538, "1672963200": 11548.411999999998, "1673049600": 11581.329000000002, "1673136000": 11568.916, "1673222400": 11537.883, "1673308800": 11559.296, "1673395200": 11555.572, "1673481600": 11586.624, "1673568000": 11628.912, "1673654400": 11604.331999999999, "1673740800": 11606.196, "1673827200": 11617.38, "1673913600": 11594.849, "1674000000": 11605.568000000001, "1674086400": 11610.208, "1674172800": 11671.027, "1674259200": 11671.5, "1674345600": 11704.055999999999, "1674432000": 11700.753, "1674518400": 11704.485, "1674604800": 11672.763, "1674691200": 11652.795999999998, "1674777600": 11632.292, "1674864000": 11569.848, "1674950400": 11586.927000000001, "1675036800": 11600.922, "1675123200": 11591.592, "1675209600": 11591.874, "1675296000": 11626.431999999999, "1675382400": 11674.629, "1675468800": 11681.16, "1675555200": 11680.227, "1675641600": 11675, "1675728000": 11681.279999999999, "1675814400": 11667.24, "1675900800": 11682.516000000001, "1675987200": 11678.768, "1676073600": 11677.404, "1676160000": 11664.713000000002, "1676246400": 11690.294, "1676332800": 11704.364, "1676419200": 11703.939999999999, "1676505600": 11688.672, "1676592000": 11692.257, "1676678400": 11709.804, "1676764800": 11679.858, "1676851200": 11658.049, "1676937600": 11655.226, "1677024000": 11687.019999999999, "1677110400": 11661.813, "1677196800": 11734.27, "1677283200": 11729.034, "1677369600": 11740.805999999999, "1677456000": 11740.68, "1677542400": 11740.68, "1677628800": 11708.64, "1677715200": 11733.749, "1677801600": 11745.064999999999, "1677888000": 11750.508, "1677974400": 11751.666, "1678060800": 11710.745, "1678147200": 11713.769999999999, "1678233600": 11697.571, "1678320000": 11704.158000000001, "1678406400": 11738.464, "1678492800": 11710.944, "1678579200": 11691.313999999998, "1678665600": 11691.313999999998, "1678752000": 11687.663999999999, "1678838400": 11690.496, "1678924800": 11670.671999999999, "1679011200": 11683.98, "1679097600": 11676.42, "1679184000": 11656.422999999999, "1679270400": 11644.163999999999, "1679356800": 11661.137999999999, "1679443200": 11676.225999999999, "1679529600": 11695.215999999999, "1679616000": 11696.16, "1679702400": 11698.047999999999, "1679788800": 11659.251999999999, "1679875200": 11641.235999999999, "1679961600": 11561.787999999999, "1680048000": 11657.25, "1680134400": 11584.3, "1680220800": 11565.831, "1680307200": 11554.48, "1680393600": 11554.539, "1680480000": 11569.644, "1680566400": 11552.693, "1680652800": 11570.58, "1680739200": 11536.662, "1680825600": 11551.728, "1680912000": 11540.4, "1680998400": 11573.414999999999, "1681084800": 11555.503999999999, "1681171200": 11549.864, "1681257600": 11569.663999999999, "1681344000": 11552.688, "1681430400": 11508.42, "1681516800": 11538.542000000001, "1681603200": 11566.838, "1681689600": 11588.544, "1681776000": 11616.885, "1681862400": 11605.536, "1681948800": 11627.279999999999, "1682035200": 11600.815999999999, "1682121600": 11582.88, "1682208000": 11607.435, "1682294400": 11596.095, "1682380800": 11589.446, "1682467200": 11556.404999999999, "1682553600": 11551.68, "1682640000": 11550.784, "1682726400": 11562.011999999999, "1682812800": 11583.704, "1682899200": 11597.909, "1682985600": 11527.109999999999, "1683072000": 11527.109999999999
  };

  legalId = environment.values.legalIdInvestmentOne;
  raiseType = "Soft Target";

  lineChart: any;

  debug: any;

  slides = [
    { poster: 'assets/img/client-1/video-splash/video-1-splash.png', url: 'https://www.youtube.com/embed/SRviJn5Wkko' }
  ];

  companyName: any;

  param: number;
  images: any;
  descrption: any;
  profileName: any;
  show = false;
  data1: any;

  properties: Array<any>;
  yield: any;
  data: any;
  timezero: any;
  show1 = true;
  show2 = false;
  check: boolean;
  sharesToggle: boolean;
  productImages: ProductImages;
  productUseCaseImages: ProductImages;
  popup: any;

  accordionData = null;

  fiatObjects: Array<FiatObject>;
  assetObjects: Array<AssetObject>;
  public vitals: OfferVitals;

  fiatAmount: number;
  sharesAmount: number;
  amount: number;
  public sharePrice: number;
  public fees: number;
  public sharesIssued: number;
  public sharesAvailable: number;
  public offerEndDate: number;
  public offerDaysLeft: number;

  showBuyPopup: boolean;
  showSpinner = false;

  percentComplete: number;
  strokeColour: string;

  hoursToGo: number;
  daysToGo: number;
  ttg: number;

  // public buyStep: number; // determines shared-buy-wizard page
  public showPart: number = 0; // determines shared-buy-wizard page

  noSocial = false;

  progressInt = 0;

  // buy-wizard
  termsAccepted: {
    'terms1': boolean,
    'terms2': boolean,
    'terms3': boolean,
    'terms4': boolean
  };

  transactionObj: newCheckoutObj;

  currentPage: any;

  constructor(
    public actionSheet: ActionSheetController,
    public user: UserService,
    public router: Router,
    public platform: Platform,
    public sanitizer: DomSanitizer,
    public modalCtrl: ModalController,
    public routerOutlet: IonRouterOutlet,
    private vaultService: VaultService
  ) {
    this.routerOutlet.swipeGesture = false;
    this.primeAssetObjects();
    this.primeObjects();
  }

  ngOnInit() {

  }

  ionViewWillEnter() {
    console.log("ionViewWillEnter() called");
    this.initPage();
  }

  // checkValidSession
  checkSessionLock(): Promise<boolean> {
    return new Promise((resolve, reject) => {
      if (this.vaultService.sessionState.isLocked || this.vaultService.sessionState.session.length < 1) {
        // ADD SUPPORT FOR OFFLINE VIEWING?
        reject(false)
      }
      resolve(true);
    });

  }


  // Fetch latest primary asset sale data and populate the data structures
  initPage() {
    this.checkSessionLock()
      .then(async (success) => {
        await this.getLatestVitals()
          .then(() => {
            this.lineChartMethod();
          }).finally(() => {
            this.setFAQItems();
          });
      }, (failed) => {
        // session invalid re-auth
        this.user.exitToLoginPage();
      });
  }

  // ensures that getprogressInt isn't called 1 million times at load
  async setprogressInt() {
    this.progressInt = this.getprogressInt();
  }

  getprogressInt(): number {
    if (!this.vitals.TokensAvailable || this.vitals.TokensAvailable.length < 1) {
      // error occurred
      return 0;
    }

    const tokensSold = this.toFloat(this.vitals.TokensSold);
    const tokensAvail = this.toFloat(this.vitals.TokensAvailable);

    if (tokensAvail === 0) {
      return -1;
    }

    if (!tokensAvail) {
      return 0;
    }

    if (tokensSold > 0) {
      return Math.floor((tokensSold / tokensAvail) * 100);
    }

    return 0;
  }



  async lineChartMethod() {

    let trendData = null;
    let timestampArray: Array<string> = [];
    let dataPointArray: Array<number> = [];
    let labelArray: Array<string> = [];
    let dataArray: Array<number> = [];


    await this.user.getWatchValueTrendLineData().then(response => {
      if (response) {
        trendData = response;
        timestampArray = Object.keys(trendData);
        dataPointArray = Object.values(trendData);
      } else {
        trendData = this.testData;
        timestampArray = Object.keys(trendData);
        dataPointArray = Object.values(trendData);
      }
    }, err => {
      console.log("Error loading asset trend data.");
      console.log(err);
      trendData = this.testData;
      timestampArray = Object.keys(trendData);
      dataPointArray = Object.values(trendData);
      return;
    });

    /*
    * NOTE: Watch Price Data requires API access. For now using static data.
    */
    trendData = this.testData;


    let lastLabel = null;
    let label = null;

    /* Show only one data point per month - filter all others */
    await timestampArray.forEach(async element => {
      label = await this.convertTimestampToDataLabel(element);

      if (label !== lastLabel) {
        lastLabel = label;
        labelArray.push(label);
        dataArray.push(trendData[element]);
      }

    });

    this.lineChart = new Chart(this.lineCanvas.nativeElement, {
      type: 'line',
      data: {
        labels: labelArray,
        datasets: [
          {
            label: "Sales price (Minimum)",
            fill: true,
            backgroundColor: 'rgba(75,192,192,0.0)',
            borderColor: 'rgba(255,255,255,1)',
            borderCapStyle: 'butt',
            borderWidth: 1,
            borderDash: [],
            borderDashOffset: 0.0,
            borderJoinStyle: 'miter',
            pointBorderColor: 'rgba(220,220,220,1)',
            pointBackgroundColor: '#fff',
            pointBorderWidth: 1,
            pointHoverRadius: 1,
            pointHoverBackgroundColor: 'rgba(75,192,192,1)',
            pointHoverBorderColor: 'rgba(220,220,220,1)',
            pointHoverBorderWidth: 1,
            pointRadius: 1,
            pointHitRadius: 1,
            data: dataArray,
            spanGaps: true
          }
        ]
      },
      options: {
        scales: {
          x: {
            ticks: {
              color: 'white'
            }
          },
          y: {
            ticks: {
              color: 'white'
            }
          }
        }
      }
    });

  }

  convertTimestampToDataLabel(UNIX_timestamp) {
    const a = new Date(UNIX_timestamp * 1000);
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const year = a.getFullYear();
    const month = months[a.getMonth()];
    const time = month + ' ' + year;
    return time;
  }


  toFloat(value: any): number {
    if (!value) { return 0; }

    if (typeof value === "string") {
      return parseFloat(value);
    }

    if (typeof value === "number") {
      return value;
    }
    return 0;
  }

  allTermsChecked(terms): Promise<boolean> {
    console.log(terms);

    return new Promise((resolve, reject) => {

      for (const item in terms) {
        if (!terms[item]) {
          resolve(false);
          break;
        }
      }

      resolve(true);

    });

  }

  async playVideo(vId: string) {
    const videoModal = this.user.getVideoPage(this.slides[vId].url, this.slides[vId].poster);
    await videoModal.then((video) => {
      video.present();
    });
  }


  async sendTransaction(trnData: newCheckoutObj) {
    // this.showBuyPopup = false;
    // this.buyStep = 4;
    this.showSpinner = true;
    this.doBuyProcess(trnData);
  }



  getStrokeColor(): string {


    if (!this.vitals.DaysLeft || !this.vitals.SecondsLeft || !this.vitals.TotalDays) {

      return '#ffffff';

    }

    if (parseInt(this.vitals.DaysLeft, 10) <= 0) {

      return '#aaafb4';

    }

    let secsLeft: number = parseInt(this.vitals.SecondsLeft, 10);

    secsLeft = 1000;
    const totalDays: number = parseInt(this.vitals.TotalDays, 10);

    const timeLeftPercent: number = (secsLeft / (totalDays * 24 * 60 * 60)) * 100;

    if (timeLeftPercent < 10) {

      return '#ff1100';
    }

    if (timeLeftPercent < 70) {

      return '#9fff00';
    }

    return '#ff1199';

  }

  /*
  * Receives "Finish" - transaction button event
  */
  async evtSendTransaction(event: string) {

    console.log("Incoming data: ");
    console.log(event);
    let evtString = JSON.parse(event);
    console.log(evtString.totalShares);

    this.processEventInput(event).then((evtDataObj: newCheckoutObj) => {
      console.log("Returned DO: ");
      console.log(evtDataObj);
      if (evtDataObj) {
        this.sendTransaction(evtDataObj);
      }
    });

    return;
  }/*
  * Receives and manages input events from Shared-Buy-Wizard Component
  */
  updateTransactionObj(event: string): void {

    this.processEventInput(event).then((evtDataObj: newCheckoutObj) => {
      if (evtDataObj) {
        this.transactionObj = evtDataObj;
      }
    });
  }

  async processEventInput(evtData: string): Promise<newCheckoutObj> {
    return new Promise((resolve, reject) => {
      if (evtData) {
        try {
          let transObj: newCheckoutObj = null;
          transObj = JSON.parse(evtData);
          console.log(transObj);
          resolve(transObj);
          return;
        } catch (err) {
          reject(null);
        }
      }
    });
  }

  /*
  * Worked that fetches the latest primary offering data. Returns true only if successful.
  */

  getLatestVitals(): Promise<boolean> {
    console.log("Fetching latest product data: ");
    console.log("LegalID: " + this.legalId);

    return new Promise(async (resolve, reject) => {
      await this.user.requestProductVitals(this.legalId).then(
        async (response) => {

          console.log(response);
          if (response == null || !response) {
            resolve(false);
            return;
          }

          if (response && response.data) {
            if (response.data.state === 0) {
              console.log("Rejected Based On State");
              resolve(false);
              return;
            }

            const vitals: OfferVitals = await response.data;
            console.log(vitals);

            this.setVitalVariables(vitals[0]);

            // set daysLeft to 0 if daysLeft returns negative number
            if (this.vitals && this.vitals.DaysLeft) {
              if (parseInt(this.vitals.DaysLeft, 10) < 1) {
                this.vitals.DaysLeft = '0';
              }
            }

            this.setStrokeColour();

          }

        }, err => { reject(false); return; })
        .then(() => {

          // add support for offline viewing
          if (!this.vaultService.sessionState.session || this.vaultService.sessionState.session.length < 1) {
            console.log("Triggered Offline Viewing Mode");
            this.fiatObjects = [{ FundId: '', SPVNAME: '', Type: '', MemberId: '', Currency: 'ZAR', Withdraw: '', Deposit: '', Spend: '', Income: '', Available: '0.00', escrow_in: '', escrow_out: '', CurrencySymbol: '', CurrencySymbolPos: '', CurrencyName: '', LocalCurrency: '', LocalCurrencySymbol: '', LocalCurrencySymbolPos: '', Extra: '', RecStatus: '', locale_id: '', currency_code: '' }];
            this.assetObjects = [{ FundId: '', SPVNAME: '', Type: '', MemberId: '', Currency: '', Withdraw: '', Deposit: '', Spend: '', Income: '', Available: '', escrow_in: '', escrow_out: '', CurrencySymbol: '', CurrencySymbolPos: '', CurrencyName: '', LocalCurrency: '', LocalCurrencySymbol: '', LocalCurrencySymbolPos: '', Extra: '', RecStatus: '', locale_id: '', currency_code: '', Lock: true, LockEnd: '', LegalId: '', market: '', share_value: '', LegalMemberId: '', Stats: { totalOnOffer: '', totalBids: '', offerMin: '', offerMax: '', timestamp: '' } }];
            resolve(true);
            return;
          }

          // refreshes this user's detailed account balances
          this.user.getAccountBalances().then(async (data) => {

            if (data.data) {
              if (data.data.Fiat) {
                if (data.data.Fiat.length > 0) {
                  this.fiatObjects = await data.data.Fiat;
                } else {
                  this.fiatObjects = [{ FundId: '', SPVNAME: '', Type: '', MemberId: '', Currency: 'ZAR', Withdraw: '', Deposit: '', Spend: '', Income: '', Available: '0.00', escrow_in: '', escrow_out: '', CurrencySymbol: '', CurrencySymbolPos: '', CurrencyName: '', LocalCurrency: '', LocalCurrencySymbol: '', LocalCurrencySymbolPos: '', Extra: '', RecStatus: '', locale_id: '', currency_code: '' }];
                }
              }
              if (data.data.Asset) {
                this.assetObjects = await data.data.Asset;
              } else {
                this.assetObjects = [{ FundId: '', SPVNAME: '', Type: '', MemberId: '', Currency: '', Withdraw: '', Deposit: '', Spend: '', Income: '', Available: '', escrow_in: '', escrow_out: '', CurrencySymbol: '', CurrencySymbolPos: '', CurrencyName: '', LocalCurrency: '', LocalCurrencySymbol: '', LocalCurrencySymbolPos: '', Extra: '', RecStatus: '', locale_id: '', currency_code: '', Lock: true, LockEnd: '', LegalId: '', market: '', share_value: '', LegalMemberId: '', Stats: { totalOnOffer: '', totalBids: '', offerMin: '', offerMax: '', timestamp: '' } }];
              }

              resolve(true);

            } else {
              console.log(data);
              this.user.exitToLoginPage();
              this.user.setToast('Unable to update balances and asset totals.');
              resolve(false);
            }
          });
        });

    });

  }

  setStrokeColour() {
    if (!this.vitals.DaysLeft || !this.vitals.TotalDays) {
      return false;
    }

    const daysLeft: number = parseInt(this.vitals.DaysLeft, 10);

    const totalDays: number = parseInt(this.vitals.TotalDays, 10);

    if (totalDays === daysLeft || totalDays === 0) {
      this.percentComplete = 0;
    } else {
      this.percentComplete = ((totalDays - daysLeft) / totalDays) * 100;
    }
    this.strokeColour = this.getStrokeColor();

  }


  toggleBuyPopupVisibility() {
    this.showBuyPopup = !this.showBuyPopup;
  }

  hideBuyPopup() {
    this.showBuyPopup = !this.showBuyPopup;
  }

  async primeObjects() {

    this.termsAccepted = {
      terms1: false,
      terms2: false,
      terms3: false,
      terms4: false
    };

    this.transactionObj = {
      totalShares: 0,
      totalValue: 0.00,
      fees: 0.00,
      vehicle: 'spv',
      terms: this.termsAccepted,
      confirm: false
    };

    this.setProductImages();

    this.percentComplete = 0;

    this.strokeColour = '#ffffff';

    this.showBuyPopup = false;

    this.sharesToggle = true; // starts by accepting #Shares

    this.amount = 0;

    this.fiatAmount = this.transactionObj.totalValue;
    console.log("Fiat amount: " + this.fiatAmount);

    this.sharesAmount = this.transactionObj.totalShares;

    this.hoursToGo = 0;

    this.daysToGo = 60;

    this.companyName = 'Infinite Industries';

    this.ttg = this.hoursToGo;

    if (this.percentComplete >= 100) {
      this.ttg = 0;
    }



    return;

  }

  async primeAssetObjects() {
    this.fiatObjects = [{ FundId: '', SPVNAME: '', Type: '', MemberId: '', Currency: 'ZAR', Withdraw: '', Deposit: '', Spend: '', Income: '', Available: '0.00', escrow_in: '', escrow_out: '', CurrencySymbol: '', CurrencySymbolPos: '', CurrencyName: '', LocalCurrency: '', LocalCurrencySymbol: '', LocalCurrencySymbolPos: '', Extra: '', RecStatus: '', locale_id: '', currency_code: '' }];
    this.assetObjects = [{ FundId: '', SPVNAME: '', Type: '', MemberId: '', Currency: '', Withdraw: '', Deposit: '', Spend: '', Income: '', Available: '', escrow_in: '', escrow_out: '', CurrencySymbol: '', CurrencySymbolPos: '', CurrencyName: '', LocalCurrency: '', LocalCurrencySymbol: '', LocalCurrencySymbolPos: '', Extra: '', RecStatus: '', locale_id: '', currency_code: '', Lock: true, LockEnd: '', LegalId: '', market: '', share_value: '', LegalMemberId: '', Stats: { totalOnOffer: '', totalBids: '', offerMin: '', offerMax: '', timestamp: '' } }];
    this.vitals = { LegalId: this.legalId + '', StartDate: '', EndDate: '', TokensIssued: '', TokensAvailable: '', TokenBasePrice: '', SalesCommission: '', TokenSalesPrice: '', TokensSold: '', TotalDays: '', DaysLeft: '', HoursLeft: '', MinsLeft: '', SecondsLeft: '', TotalBuyers: '', InEscrow: '', requestTimeStamp: '' };
    return;
  }


  setVitalVariables(data: any) {
    if (!data) {
      return false;
    }

    this.vitals = data;

    this.fees = +(+this.vitals.SalesCommission).toFixed(2);
    this.sharePrice = +(+this.vitals.TokenSalesPrice - this.fees);
    this.sharesIssued = +this.vitals.TokensIssued;
    this.sharesAvailable = +this.vitals.TokensAvailable;
    this.offerEndDate = +this.vitals.EndDate;
    this.offerDaysLeft = +this.vitals.DaysLeft;

    if (this.vitals.DaysLeft) {
      const daysLeft = +this.vitals.DaysLeft;
      if (daysLeft < 0) { this.daysToGo = 0; return; }
      this.daysToGo = daysLeft;
    }

    return;

  }



  setProductImages() {
    this.productImages = [
      {
        src: 'assets/img/client-1/product/1.png',
        name: 'Product 1',
        description: ""
      },
      {
        src: 'assets/img/client-1/product/2.png',
        name: 'Product 2',
        description: ""
      },
      {
        src: 'assets/img/client-1/product/3.png',
        name: 'Product 3',
        description: ""
      },
      {
        src: 'assets/img/client-1/product/4.png',
        name: 'Product 4',
        description: ""
      },
      {
        src: 'assets/img/client-1/product/5.png',
        name: 'Product 5',
        description: ""
      },
      {
        src: 'assets/img/client-1/product/6.png',
        name: 'Product 6',
        description: ""
      }
    ];

    this.productUseCaseImages = [
      {
        src: 'assets/img/client-1/product/use-case-1.png',
        name: 'Guard house',
        description: 'Low cost housing'
      },
      {
        src: 'assets/img/client-1/product/use-case-2.png',
        name: 'Walling',
        description: 'Insulated panels'
      },
      {
        src: 'assets/img/client-1/product/use-case-3.png',
        name: 'Eastgate Logo',
        description: 'Corporate branding'
      },
      {
        src: 'assets/img/client-1/product/use-case-4.png',
        name: 'Delicious Monster',
        description: 'Decorative art'
      },
      {
        src: 'assets/img/client-1/product/use-case-5.png',
        name: 'Christmas Tree',
        description: 'Decorative art'
      },
      {
        src: 'assets/img/client-1/product/use-case-6.png',
        name: 'School Desk',
        description: 'Furniture'
      }
    ];
  }

  getSubtitle(type: string): string {
    if (type === 'time') {
      if (this.percentComplete >= 100) {
        return '';
      }
      return this.hoursToGo ? 'hours' : 'days';
    } else {
      if (this.percentComplete >= 100) {
        return 'SOLD OUT';
      } else if (this.percentComplete >= 50) {
        return 'Selling fast!';
      } else if (this.percentComplete > 0) {
        return 'Brand new';
      } else {
        return '';
      }
    }
  }

  showBalanceExceeded() {
    const message = 'Amount entered exceeds funds available';
    this.user.setToast(message);

  }

  showSetMax() {

    if (this.fiatObjects && this.fiatObjects.length > 0 && this.fiatObjects[0].Available
      && +this.fiatObjects[0].Available > 0
      && +this.fiatObjects[0].Available > this.sharePrice) {
      return true;
    }
    return false;
  }


  calcAmount(): any {

    if (!this.fiatObjects || this.fiatObjects.length === 0) {
      return;
    }

    if (this.sharesAmount < 0 && this.fiatAmount < 0) {
      return;
    }

    if (isNaN(this.fiatAmount)) { return; }

    if (this.fiatAmount === 0) { return; }

    this.transactionObj.totalValue = this.fiatAmount;
    this.transactionObj.totalShares = this.fiatAmount / this.sharePrice;
    this.sharesAmount = Math.floor(this.transactionObj.totalShares);

    if (this.fiatAmount > +this.fiatObjects[0].Available) {

      this.showBalanceExceeded();
    }
    return;
  }

  setFiatWalletBalance() {
    if (this.sharesToggle) { // shares input - calculate shares for available balance
      if (+this.fiatObjects[0].Available <= 0 || this.sharePrice <= 0) {
        this.sharesAmount = 0;
        return;
      }
      const numShares = +this.fiatObjects[0].Available / this.sharePrice;
      this.sharesAmount = Math.floor(numShares);

    } else {
      if (!this.fiatObjects[0].Available || +this.fiatObjects[0].Available <= 0) {
        this.fiatAmount = 0;
        return;
      }

      const numShares = +this.fiatObjects[0].Available / this.sharePrice;
      this.sharesAmount = Math.floor(numShares);

      this.fiatAmount = this.sharesAmount * this.sharePrice;

    }

  }

  navigate(direction: string) {
    console.log("direction= " + direction);
    if (!this.showBuyPopup) {
      this.router.navigate(['home']);
      return;
    }

    let dir = 0;
    switch (direction) {
      case 'back':
        this.showPart--;
      case 'forward':
        this.showPart++;
      case 'close':
        this.showBuyPopup = !this.showBuyPopup;
    }

    return;

  }

  close() {
    this.router.navigate(['home']);
  }

  toggleShareToggle(): void {
    this.calcAmount();
    this.sharesToggle = !this.sharesToggle;

  }

  setVehicle(value: string) {
    this.transactionObj.vehicle = 'spv';
  }


  doBuyProcess(trnObj: newCheckoutObj) {
    const numShares = 0;

    const params = {
      type: 'buy',
      legalid: this.legalId,
      amount: trnObj.totalShares,
      vehicle: 'spv',
      termsaccepted: trnObj.terms ? 1 : 0
    };

    this.user.doBuyShares(params).then(success => {
      this.showSpinner = false;

      this.toggleBuyPopupVisibility();
      this.primeObjects();

      setTimeout(() => {
        this.user.setPermaToast('Transaction complete! Shares added to your escrow wallet.');
        setTimeout(() => {
          this.router.navigate(['home']);
        }, 250);
      }, 500);

    }, failed => {

      this.showSpinner = false;
      this.showBuyPopup = true;

      setTimeout(() => {
        this.user.setPermaToast('Share purchase failed. Try again or contact Instavest support for assistance.');
      }, 500);

    });
  }


  launchDocs(id: number) {
    console.log(id);
    let url = "";
    switch (id) {
      case 0: {
        // IM URL
        url = "https://instavestcapital.com/app/assets/luxury-time-124060-01/certificate.pdf";
        break;
      }
      case 1: {
        // IM URL
        url = "https://www.rolex.com/watches/submariner/m124060-0001";
        break;
      }
      case 2: {
        // IM URL
        url = "https://watchcharts.com/watch_model/21813-rolex-submariner-124060";
        break;
      }
      case 3: {
        // IM URL
        url = "https://instavestcapital.com/legal/tos.pdf";
        break;
      }
    }
    console.log(url);

    this.launchExternalWebsite(url);
  }

  launchExternalWebsite(url: string) {
    if (url) {
      const options: OpenOptions = { url, presentationStyle: 'popover', windowName: 'Instavest' };
      Browser.open(options);

    }
    return;
  }

  setFAQItems() {
    console.log("Setting FAQs with data: ");
    console.log(this.vitals);

    this.accordionData = [
      {
        title: 'What is the minimum investment amount?',
        description: 'The minimum investment amount is the price of one share token. In this case it is R' + (this.sharePrice) + '.',
        active: false
      },
      {
        title: 'What are share tokens?',
        description: "When you invest in an asset you participate in the purchase, ownership and growth of an asset. Your total equity is the numbers of share tokens you own divided by the total number of share tokens issued.",
        active: false
      },
      {
        title: 'How many share tokens where issued for this asset?',
        description: this.vitals.TokensIssued,
        active: false
      },
      {
        title: 'Is there a minimum number of tokens that need to be sold?',
        description: "Yes, ALL of the share tokens need to be sold for the asset to be purchased.",
        active: false
      },
      {
        title: "What happens to my money if all the share tokens aren't sold?",
        description: "When you buy tokens, your money is placed in a special part of your Instavest account called the escrow wallet. It only moves out of escrow once the all the share tokens have been sold. If the share token sale is cancelled your money is returned to your normal wallet.",
        active: false
      },
      {
        title: 'Do I have access to my investment?',
        description: 'Once the primary offering has ended you can list your tokens for sale on the Instvest marketplace. Liquidity is not guaranteed.',
        active: false
      },
      {
        title: 'How does taxation work?',
        description: 'You need to consult a tax practitioner for information.',
        active: false
      },
      {
        title: 'Do I have voting rights?',
        description: 'No. Instavest Capital and its team of highly qualified, experienced individuals manage the assets on behalf of all token holders.',
        active: false
      },
      {
        title: 'When an asset is sold, how do I get paid?',
        description: 'Your share tokens will be swapped for cash tokens which will be deposited in your Instavest wallet from where you can withdraw it to a bank account or apply it to further opportunities. ',
        active: false
      }
    ];
  }

  async openModal() {
    let helpScreen: any = null;
    let helpText = null;
    this.currentPage = 'project';
    console.log('currentPge', this.currentPage);
  }
}
